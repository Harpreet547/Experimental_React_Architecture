import React, { useCallback, useId } from "react";
import { ControlTypes, IObjectDatabind, IRowDatabind, useDatabind } from "@harpreet547/cdh";
import '../Controls.scss';
import {
    Textarea as FUITextarea,
    TextareaProps as FUITextareaProps,
    InputOnChangeData,
} from "@fluentui/react-components";
import ControlLabel from "../ControlLabel/ControlLabel";
import { getLabelClassName } from "../HelperFunctions";

interface ITextArea extends FUITextareaProps, ControlTypes.ILocalizedLabel {
    labelPosition?: ControlTypes.labelPosition;
    databind?: IObjectDatabind | IRowDatabind;
}
const TextArea: React.FC<ITextArea> = (props: ITextArea): React.ReactElement => {
    const { label, labelLocalizedID, databind, labelPosition, id, ...textAreaProps } = props;

    const { onChange } = textAreaProps;

    const autoGeneratedID = useId();

    const finalID = id ?? autoGeneratedID + '-TextArea';

    const {
        boundValue,
        updateBoundValue
    } = useDatabind<string>(databind);

    const onChangeHandler = useCallback((ev: React.ChangeEvent<HTMLTextAreaElement>, data: InputOnChangeData) => {
        databind && updateBoundValue(data.value);
        onChange?.(ev, data);
    }, [databind, onChange, updateBoundValue]);

    const labelClass = getLabelClassName(labelPosition ?? 'Top');

    return (
        <div className={`cruds-controls-root ${labelClass}`}>
            <ControlLabel
                htmlFor={finalID}
                label={label}
                labelLocalizedID={labelLocalizedID}
            />
            <FUITextarea
                {...textAreaProps}
                id={finalID}
                value={databind ? `${boundValue ?? ''}` ?? '' : props.value}
                onChange={onChangeHandler}
            />
        </div>
    );
};
export default TextArea;