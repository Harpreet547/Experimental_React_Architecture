import React, { useCallback, useId } from "react";
import { ControlTypes, IObjectDatabind, IRowDatabind, useDatabind } from "@harpreet547/cdh";
import '../Controls.scss';
import {
    Input as FUIInput,
    InputProps as FUIInputProps,
    InputOnChangeData,
} from "@fluentui/react-components";
import ControlLabel from "../ControlLabel/ControlLabel";
import { getLabelClassName } from "../HelperFunctions";

interface ITextBox extends FUIInputProps, ControlTypes.ILocalizedLabel {
    labelPosition?: ControlTypes.labelPosition;
    databind?: IObjectDatabind | IRowDatabind;
}
const TextBox: React.FC<ITextBox> = (props: ITextBox): React.ReactElement => {
    const { label, labelLocalizedID, databind, labelPosition, type, id, ...inputProps } = props;

    const { onChange } = inputProps;

    const autoGeneratedID = useId();

    const finalID = id ?? autoGeneratedID + '-textbox';

    const {
        boundValue,
        updateBoundValue
    } = useDatabind<string | number>(databind);

    const onChangeHandler = useCallback((ev: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {
        if (type === 'number') {
            databind && updateBoundValue(parseInt(data.value));
        } else {
            databind && updateBoundValue(data.value);
        }
        onChange?.(ev, data);
    }, [databind, onChange, type, updateBoundValue]);

    const labelClass = getLabelClassName(labelPosition ?? 'Top');

    return (
        <div className={`cruds-controls-root ${labelClass}`}>
            <ControlLabel
                htmlFor={finalID}
                label={label}
                labelLocalizedID={labelLocalizedID}
            />
            <FUIInput
                {...inputProps}
                id={finalID}
                value={databind ? `${boundValue ?? ''}` ?? '' : props.value}
                onChange={onChangeHandler}
                type={type}
            />
        </div>
    );
};
export default TextBox;