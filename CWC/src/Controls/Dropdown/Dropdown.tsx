import React, { useCallback, useId } from 'react';
import { ControlTypes, IKeyValueDataSource, IKeyValueElement, IObjectDatabind, useDataSource, IRowDatabind, useDatabind } from '@cruds/cdh';
import {
    DropdownProps as FUIDropdownProps,
    Dropdown as FUIDropdown,
    Option as FUIOption,
    OptionProps as FUIOptionProps,
} from '@fluentui/react-components';
import ControlLabel from '../ControlLabel/ControlLabel';
import { getLabelClassName } from '../HelperFunctions';
import '../Controls.scss';
import { OptionOnSelectData, SelectionEvents } from '@fluentui/react-combobox';

type DropdownOption = FUIOptionProps & {
    text?: string;
    textLocalizedID?: string;
    value: string | number;
};

interface IDropdownProps extends FUIDropdownProps, ControlTypes.ILocalizedLabel {
    options?: DropdownOption[];
    dataSource?: IKeyValueDataSource;
    databind?: IObjectDatabind | IRowDatabind;
    labelPosition?: ControlTypes.labelPosition;
    isStringVal?: boolean;
}
const Dropdown: React.FC<IDropdownProps> = (props: IDropdownProps): React.ReactElement => {
    const {
        label,
        labelLocalizedID,
        className,
        options,
        id,
        dataSource,
        databind,
        onOptionSelect,
        labelPosition,
        disabled,
        multiselect,
        isStringVal,
        ...selectProps
    } = props;

    const autoGeneratedID = useId();

    const finalID = id ?? autoGeneratedID + '-dropdown';

    const dataSourceRows = useDataSource('KeyValueDataSource', dataSource) as IKeyValueElement[] | undefined;

    const {
        boundValue,
        updateBoundValue
    } = useDatabind<string[] | number[] | string | number | undefined | null>(databind);

    const onChangeHandler = useCallback((event: SelectionEvents, data: OptionOnSelectData) => {
        if (multiselect) {
            const values = isStringVal ? data.selectedOptions : data?.selectedOptions?.map(option => parseInt(option));
            databind && updateBoundValue(values);
        } else {
            const value = isStringVal ? (
                data.selectedOptions.length > 0 ? data.selectedOptions?.[0] : null
            ) : (
                data.selectedOptions.length > 0 ? parseInt(data.selectedOptions?.[0]) : null
            );
            databind && updateBoundValue(value);
        }
        onOptionSelect?.(event, data);
    }, [databind, isStringVal, multiselect, onOptionSelect, updateBoundValue]);

    const finalBoundValue = (typeof boundValue === 'string' || typeof boundValue === 'number' ? (
        [`${boundValue}`]
    ) : (
        boundValue?.map(value => `${value}`)
    )) ?? (props.selectedOptions ?? []);

    return (
        <div className={`cruds-controls-root ${getLabelClassName(labelPosition ?? 'Top')}`}>
            <ControlLabel
                htmlFor={finalID}
                label={label}
                labelLocalizedID={labelLocalizedID}
            />
            <FUIDropdown
                {...selectProps}
                id={finalID}
                className={`cruds-dropdown-select ${className ?? ''}`}
                selectedOptions={finalBoundValue}
                onOptionSelect={onChangeHandler}
                disabled={disabled ?? (dataSourceRows?.length === 0)}
                multiselect={multiselect}
            >
                {
                    dataSourceRows ? (
                        dataSourceRows.map((row) => (
                            <FUIOption value={`${row.key}`} key={row.key} >{`${(row.value as string | number)}`}</FUIOption>
                        ))
                    ) : (
                        options?.map((option) => (
                            <FUIOption {...option} key={option.value} >{option.text ?? ''}</FUIOption>
                        ))
                    )
                }
            </FUIDropdown>
        </div>
    );
};
export default Dropdown;